// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function fromJs(param) {
  return {
          address: Caml_option.nullable_to_opt(param.address),
          code: param.code,
          dest: Caml_option.nullable_to_opt(param.dest),
          errno: param.errno,
          info: Caml_option.nullable_to_opt(param.info),
          message: param.message,
          path: Caml_option.nullable_to_opt(param.path),
          port: Caml_option.nullable_to_opt(param.port),
          syscall: param.syscall
        };
}

var SystemError = {
  fromJs: fromJs
};

var UnknownError = { };

function _makeSystemError(exc) {
  var error = fromJs(exc);
  var match = error.code;
  switch (match) {
    case "EACCES" :
        return /* AccessDenied */Block.__(0, [error]);
    case "EADDRINUSE" :
        return /* AddressInUse */Block.__(1, [error]);
    case "ECONNREFUSED" :
        return /* ConnectionRefused */Block.__(2, [error]);
    case "ECONNRESET" :
        return /* ConnectionReset */Block.__(3, [error]);
    case "EEXIST" :
        return /* FileExists */Block.__(4, [error]);
    case "EISDIR" :
        return /* IsADirectory */Block.__(5, [error]);
    case "EMFILE" :
        return /* TooManyOpenFiles */Block.__(6, [error]);
    case "ENOENT" :
        return /* NoSuchFileOrDirectory */Block.__(7, [error]);
    case "ENOTDIR" :
        return /* NotADirectory */Block.__(8, [error]);
    case "ENOTEMPTY" :
        return /* DirectoryNotEmpty */Block.__(9, [error]);
    case "ENOTFOUND" :
        return /* DNSLookupFailed */Block.__(10, [error]);
    case "EPERM" :
        return /* NotPermitted */Block.__(11, [error]);
    case "EPIPE" :
        return /* BrokenPipe */Block.__(12, [error]);
    case "ETIMEDOUT" :
        return /* TimedOut */Block.__(13, [error]);
    default:
      return /* UnknownSystemError */Block.__(14, [error]);
  }
}

function _makeUnknownError(exc) {
  return /* OtherUnknownError */Block.__(15, [exc]);
}

function fromException(exc) {
  var _makeError = (function (makeSystemError, makeUnknownError, exc) {
            return exc.syscall === undefined
                ? makeUnknownError(exc)
                : makeSystemError(exc)
        });
  return _makeError(_makeSystemError, _makeUnknownError, exc);
}

exports.SystemError = SystemError;
exports.UnknownError = UnknownError;
exports._makeSystemError = _makeSystemError;
exports._makeUnknownError = _makeUnknownError;
exports.fromException = fromException;
/* No side effect */
